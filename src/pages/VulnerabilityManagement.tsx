import { Card } from "@/components/ui/card";
import { Bug, Shield, AlertTriangle, CheckCircle, Flag, ArrowUp, Database, Clipboard } from "lucide-react";
import { ChatButton } from "@/components/ChatButton";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Button } from "@/components/ui/button";
import { useState } from "react";
import { useToast } from "@/components/ui/use-toast";

interface Incident {
  id: string;
  title: string;
  severity: "critical" | "high" | "medium" | "low";
  status: "open" | "investigating" | "resolved";
  timestamp: string;
  description: string;
}

const VulnerabilityManagement = () => {
  const { toast } = useToast();
  const [incidents, setIncidents] = useState<Incident[]>([
    {
      id: "1",
      title: "SQL Injection Attempt",
      severity: "critical",
      status: "investigating",
      timestamp: "2024-02-20T10:30:00",
      description: "Multiple SQL injection attempts detected on the login endpoint"
    },
    {
      id: "2",
      title: "Outdated SSL Certificate",
      severity: "high",
      status: "open",
      timestamp: "2024-02-19T15:45:00",
      description: "SSL certificate expiring in 48 hours"
    },
    {
      id: "3",
      title: "Unauthorized Access Attempt",
      severity: "medium",
      status: "resolved",
      timestamp: "2024-02-18T09:15:00",
      description: "Failed login attempts from suspicious IP addresses"
    }
  ]);

  const handleEscalate = (id: string) => {
    toast({
      title: "Incident Escalated",
      description: "The incident has been escalated to the security team.",
    });
    console.log("Escalating incident:", id);
  };

  const handleStatusUpdate = (id: string, newStatus: "open" | "investigating" | "resolved") => {
    setIncidents(incidents.map(incident => 
      incident.id === id ? { ...incident, status: newStatus } : incident
    ));
    toast({
      title: "Status Updated",
      description: `Incident status changed to ${newStatus}`,
    });
  };

  const getSeverityColor = (severity: string) => {
    switch (severity) {
      case "critical": return "text-red-500";
      case "high": return "text-orange-500";
      case "medium": return "text-yellow-500";
      case "low": return "text-green-500";
      default: return "text-gray-500";
    }
  };

  const getStatusBadgeColor = (status: string) => {
    switch (status) {
      case "open": return "bg-red-100 text-red-800";
      case "investigating": return "bg-yellow-100 text-yellow-800";
      case "resolved": return "bg-green-100 text-green-800";
      default: return "bg-gray-100 text-gray-800";
    }
  };

  return (
    <div className="min-h-screen p-6 bg-gradient-to-b from-background to-background/95">
      <main className="container mx-auto space-y-6">
        <div className="flex items-center justify-between mb-8">
          <div>
            <h1 className="text-3xl font-bold mb-2">Vulnerability Management</h1>
            <p className="text-muted-foreground">Track and respond to security incidents</p>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8">
          <Card className="glass-panel p-4 animate-fade-up">
            <div className="flex items-center gap-3">
              <AlertTriangle className="w-8 h-8 text-destructive" />
              <div>
                <p className="text-sm text-muted-foreground">Critical Incidents</p>
                <p className="text-2xl font-bold">2</p>
              </div>
            </div>
          </Card>
          
          <Card className="glass-panel p-4 animate-fade-up">
            <div className="flex items-center gap-3">
              <Bug className="w-8 h-8 text-warning" />
              <div>
                <p className="text-sm text-muted-foreground">Open Issues</p>
                <p className="text-2xl font-bold">5</p>
              </div>
            </div>
          </Card>
          
          <Card className="glass-panel p-4 animate-fade-up">
            <div className="flex items-center gap-3">
              <Shield className="w-8 h-8 text-success" />
              <div>
                <p className="text-sm text-muted-foreground">Resolved Today</p>
                <p className="text-2xl font-bold">3</p>
              </div>
            </div>
          </Card>

          <Card className="glass-panel p-4 animate-fade-up">
            <div className="flex items-center gap-3">
              <Database className="w-8 h-8 text-primary" />
              <div>
                <p className="text-sm text-muted-foreground">Total Incidents</p>
                <p className="text-2xl font-bold">10</p>
              </div>
            </div>
          </Card>
        </div>

        <Card className="glass-panel p-6 animate-fade-up">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold">Incident Response</h2>
            <Button variant="outline" className="gap-2">
              <Flag className="w-4 h-4" />
              Report New Incident
            </Button>
          </div>

          <div className="rounded-lg overflow-hidden border">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Incident</TableHead>
                  <TableHead>Severity</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead>Timestamp</TableHead>
                  <TableHead>Actions</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {incidents.map((incident) => (
                  <TableRow key={incident.id}>
                    <TableCell>
                      <div>
                        <p className="font-medium">{incident.title}</p>
                        <p className="text-sm text-muted-foreground">{incident.description}</p>
                      </div>
                    </TableCell>
                    <TableCell>
                      <span className={`font-medium ${getSeverityColor(incident.severity)}`}>
                        {incident.severity.charAt(0).toUpperCase() + incident.severity.slice(1)}
                      </span>
                    </TableCell>
                    <TableCell>
                      <span className={`px-2 py-1 rounded-full text-xs font-medium ${getStatusBadgeColor(incident.status)}`}>
                        {incident.status}
                      </span>
                    </TableCell>
                    <TableCell>
                      {new Date(incident.timestamp).toLocaleString()}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center gap-2">
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleEscalate(incident.id)}
                        >
                          <ArrowUp className="w-4 h-4 mr-1" />
                          Escalate
                        </Button>
                        <Button
                          variant="outline"
                          size="sm"
                          onClick={() => handleStatusUpdate(incident.id, "resolved")}
                          className="text-success"
                        >
                          <CheckCircle className="w-4 h-4 mr-1" />
                          Resolve
                        </Button>
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </Card>
      </main>
      <ChatButton />
    </div>
  );
};

export default VulnerabilityManagement;